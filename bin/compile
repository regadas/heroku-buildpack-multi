#!/usr/bin/env bash

# Fail fast and fail hard.
set -eo pipefail

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
BUILD_DIR=$1
CACHE_DIR=$2

unset GIT_DIR

# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR BIN_DIR

function indent() {
  c='s/^/ /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *) sed -u "$c";;
  esac
}

function build() {
  buildpack=$1

  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  url=${buildpack%#*}
  branch=${buildpack#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"
    git clone $url $dir >/dev/null 2>&1
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    chmod +x $dir/bin/{detect,compile,release}

    framework=$($dir/bin/detect $BUILD_DIR)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      $dir/bin/compile $BUILD_DIR $CACHE_DIR

      if [ $? != 0 ]; then
        exit 1
      fi

      $dir/bin/release $BUILD_DIR > $BUILD_DIR/last_pack_release.out
    fi
  fi
}

source $BIN_DIR/hooks/pre_compile

for buildpack in $(cat $BUILD_DIR/.buildpacks); do
  build $buildpack
done

source $BIN_DIR/hooks/post_compile


echo "Using release configuration from last framework $framework:" | indent
cat $BUILD_DIR/last_pack_release.out | indent
